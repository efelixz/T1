# neuroforge/agents/metacog.py (NOVO FICHEIRO)

from .base import BaseAgent
from neuroforge.integrations.gemini import GeminiClient

class MetaCog(BaseAgent):
    """
    O agente MetaCog √© o revisor de c√≥digo (Code Reviewer).
    Ele garante que o c√≥digo gerado adere a um guia de estilo espec√≠fico.
    """
    def __init__(self):
        self.gemini_client = GeminiClient()

    def run(self, code_to_review: str, style_guide: str) -> str:
        """
        Recebe um bloco de c√≥digo e um guia de estilo, e retorna o c√≥digo refatorado.

        Args:
            code_to_review (str): O c√≥digo a ser analisado e refatorado.
            style_guide (str): As regras de estilo a serem seguidas.

        Returns:
            str: O c√≥digo refatorado.
        """
        print("ü§ñ Agente MetaCog recebeu o c√≥digo para revis√£o de estilo.")
        
        refactoring_prompt = f"""
        Voc√™ √© um engenheiro de software s√©nior extremamente meticuloso, a fazer uma revis√£o de c√≥digo.
        A sua √∫nica tarefa √© refatorar o 'C√ìDIGO A SER REVISTO' para que ele siga estritamente todas as
        regras definidas no 'GUIA DE ESTILO'.
        N√£o adicione novas funcionalidades. N√£o mude a l√≥gica. Apenas aplique as regras de estilo.
        Retorne APENAS o ficheiro de c√≥digo completo e refatorado.

        --- GUIA DE ESTILO ---
        {style_guide}
        ---

        --- C√ìDIGO A SER REVISTO ---
        {code_to_review}
        ---
        """

        print("‚ö°Ô∏è A contactar a IA para aplicar o guia de estilo...")
        refactored_code = self.gemini_client.generate_code(refactoring_prompt)
        print("‚úÖ Revis√£o de estilo conclu√≠da!")
        
        return refactored_code